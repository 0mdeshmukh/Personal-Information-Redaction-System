import os
import fitz  # PyMuPDF
from presidio_analyzer import AnalyzerEngine
import pytesseract
from PIL import Image
import cv2
from docx import Document

# Set up Tesseract path
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# Initialize the Presidio Analyzer
analyzer = AnalyzerEngine()

# Function to redact PII in PDFs by placing black rectangles
def redact_pdf_file(file_path, output_path):
    doc = fitz.open(file_path)
    for page_num in range(len(doc)):
        page = doc[page_num]
        text = page.get_text()
        results = analyzer.analyze(text=text, language="en")
        
        for result in results:
            search_text = text[result.start:result.end]
            if search_text.strip() == "":
                continue
            text_instances = page.search_for(search_text)
            for inst in text_instances:
                page.add_redact_annot(inst, fill=(0, 0, 0))
        
        page.apply_redactions()
    doc.save(output_path)
    print(f"Redacted PDF saved to {output_path}")

# Function to redact PII in Text files (Notepad, Word)
def redact_text_file(file_path, output_path):
    # Check if it's a .docx file
    if file_path.endswith(".docx"):
        doc = Document(file_path)
        text = "\n".join([para.text for para in doc.paragraphs])
    else:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            text = f.read()

    results = analyzer.analyze(text=text, language="en")
    redacted_text = text
    for result in sorted(results, key=lambda r: r.start, reverse=True):
        redacted_text = redacted_text[:result.start] + "[REDACTED]" + redacted_text[result.end:]
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(redacted_text)
    print(f"Redacted text file saved to {output_path}")

# Function to redact PII in Images
def redact_image_file(file_path, output_path):
    image = cv2.imread(file_path)
    data = pytesseract.image_to_data(image, output_type=pytesseract.Output.DICT)

    n_boxes = len(data['text'])
    for i in range(n_boxes):
        word = data['text'][i]
        if word.strip() == "":
            continue
        results = analyzer.analyze(text=word, language="en")
        if results:
            (x, y, w, h) = (data['left'][i], data['top'][i], data['width'][i], data['height'][i])
            cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 0), -1)

    cv2.imwrite(output_path, image)
    print(f"Redacted image saved to {output_path}")

# Main function to select input type and process accordingly
def main():
    print("Choose the type of file to redact:")
    print("1. PDF")
    print("2. Text (Notepad, Word)")
    print("3. Image")
    choice = input("Enter your choice (1/2/3): ")

    file_path = input("Enter the file path: ").strip('"')
    if not os.path.exists(file_path):
        print("File does not exist. Exiting.")
        return

    if choice == '1':
        output_pdf_path = os.path.join("E:\\Projects\\PII 2\\Redacted files", "redacted_output.pdf")
        redact_pdf_file(file_path, output_pdf_path)
    elif choice == '2':
        output_text_path = os.path.join("E:\\Projects\\PII 2\\Redacted files", "redacted_output.txt")
        redact_text_file(file_path, output_text_path)
    elif choice == '3':
        output_image_path = os.path.join("E:\\Projects\\PII 2\\Redacted files", "redacted_output.png")
        redact_image_file(file_path, output_image_path)
    else:
        print("Invalid choice. Exiting.")

if __name__ == "__main__":
    main()
