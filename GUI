import os
import tkinter as tk
from tkinter import filedialog, messagebox
import ttkbootstrap as tb
from ttkbootstrap.constants import *
from PIL import Image, ImageTk
import fitz  # PyMuPDF
from docx import Document
from PII_2 import redact_pdf_file, redact_text_file, redact_image_file
import threading

class PiiRedactorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("PII Redactor")
        self.root.state('zoomed')
        self.input_path = None
        self.filetype = None
        self.frame = tb.Frame(self.root)
        self.frame.pack(fill='both', expand=True)
        self.show_splash_screen()

    def show_splash_screen(self):
        splash = tk.Toplevel(self.root)
        splash.overrideredirect(True)
        splash.geometry(f"{self.root.winfo_screenwidth()}x{self.root.winfo_screenheight()}+0+0")
        splash.configure(bg='white')

        logo = tk.Label(splash, text="üîí PII Redactor", font=("Times New Roman", 40, "bold"), bg="white")
        logo.place(relx=0.5, rely=0.5, anchor="center")

        splash.after(1000, lambda: [splash.destroy(), self.init_home()])  # Show for 1 second

    def clear_frame(self):
        for widget in self.frame.winfo_children():
            widget.destroy()

    def init_home(self):
        self.clear_frame()

        container = tb.Frame(self.frame)
        container.place(relx=0.5, rely=0.5, anchor="center")

        tb.Label(container, text="PII Redaction Tool", font=("Times New Roman", 40, "bold")).pack(pady=40)
        tb.Button(
            container,
            text="üöÄ Launch Tool",
            bootstyle="Primary",
            command=self.select_input_type,
            width=100,
            padding=(20, 15),
            style="TButton"
        ).pack(pady=80)

    def select_input_type(self):
        self.clear_frame()

        container = tb.Frame(self.frame)
        container.place(relx=0.5, rely=0.5, anchor="center")

        tb.Label(container, text="Select File to Secure", font=("Times New Roman", 20, "bold")).pack(pady=30)

        file_options = [("PDF", "üìÑ"), ("Text", "üìù"), ("Image", "üñºÔ∏è")]
        for ftype, emoji in file_options:
            tb.Button(
                container,
                text=f"{emoji} {ftype}",
                width=40,
                padding=(20, 15),
                style="TButton",
                command=lambda t=ftype.lower(): self.load_file(t),
                bootstyle="primary"
            ).pack(pady=15)

        tb.Button(
            container,
            text="üîô Back",
            bootstyle="secondary",
            command=self.init_home,
            width=40,
            padding=(20, 15),
            style="TButton"
        ).pack(pady=30)

    def load_file(self, filetype):
        self.filetype = filetype
        types = {
            "pdf": [("PDF files", "*.pdf")],
            "text": [("Text files", "*.txt"), ("Word files", "*.docx")],
            "image": [("Image files", "*.png;*.jpg;*.jpeg")]
        }
        file_path = filedialog.askopenfilename(title="Select a file", filetypes=types.get(filetype, []))
        if not file_path:
            return
        self.input_path = file_path
        self.preview_file()

    def preview_file(self):
        self.clear_frame()

        tb.Label(self.frame, text="Document Glimpse", font=("Times New Roman", 20, "bold")).pack(pady=10)
        preview_box = tk.Text(self.frame, height=20, wrap="word", font=("Times New Roman", 12))
        preview_box.pack(padx=10, pady=10, fill='both', expand=True)

        try:
            if self.filetype == "pdf":
                doc = fitz.open(self.input_path)
                preview_box.insert("1.0", doc[0].get_text() if doc.page_count > 0 else "No content found.")
            elif self.filetype == "text":
                if self.input_path.endswith(".docx"):
                    doc = Document(self.input_path)
                    full_text = "\n".join([p.text for p in doc.paragraphs])
                    preview_box.insert("1.0", full_text)
                else:
                    with open(self.input_path, "r", encoding="utf-8", errors="ignore") as f:
                        preview_box.insert("1.0", f.read())
            elif self.filetype == "image":
                image = Image.open(self.input_path)
                image.thumbnail((1000, 700))
                img = ImageTk.PhotoImage(image)
                img_label = tb.Label(self.frame, image=img)
                img_label.image = img
                img_label.pack(pady=10)
                preview_box.pack_forget()
        except Exception as e:
            preview_box.insert("1.0", f"Error loading file: {e}")

        if self.filetype != "image":
            tb.Label(self.frame, text="üîç Zoom:", font=("Times New Roman", 12)).pack()
            zoom_slider = tb.Scale(
                self.frame, from_=8, to=30, orient="horizontal",
                command=lambda val: preview_box.config(font=("Times New Roman", int(float(val))))
            )
            zoom_slider.set(12)
            zoom_slider.pack(pady=5)

        tb.Button(self.frame, text="üõ°Ô∏è Secure It", bootstyle="success", width=20, padding=(10, 5),
                  style="TButton", command=lambda: self.redact_file(self.filetype)).pack(pady=15)

        tb.Button(self.frame, text="üîÑ Browse Again", bootstyle="info", width=20, padding=(10, 5),
                  style="TButton", command=self.upload_again).pack(pady=10)

        tb.Button(self.frame, text="üè† Home", bootstyle="secondary", width=20, padding=(10, 5),
                  style="TButton", command=self.init_home).pack(pady=10)

    def upload_again(self):
        file_path = filedialog.askopenfilename(title="Select a new file", filetypes=self.get_filetypes(self.filetype))
        if not file_path:
            return
        self.input_path = file_path
        self.preview_file()

    def get_filetypes(self, filetype):
        types = {
            "pdf": [("PDF files", "*.pdf")],
            "text": [("Text files", "*.txt"), ("Word files", "*.docx")],
            "image": [("Image files", "*.png;*.jpg;*.jpeg")]
        }
        return types.get(filetype, [])

    def redact_file(self, filetype):
        output_path = filedialog.asksaveasfilename(
            defaultextension=os.path.splitext(self.input_path)[1],
            title="Save Secured File As",
            filetypes=[("All files", "*.*")]
        )
        if not output_path:
            return

        self.show_loader("Securing... Please wait.")

        def process():
            try:
                if filetype == "pdf":
                    redact_pdf_file(self.input_path, output_path)
                elif filetype == "text":
                    redact_text_file(self.input_path, output_path)
                elif filetype == "image":
                    redact_image_file(self.input_path, output_path)
                self.hide_loader()
                messagebox.showinfo("‚úÖ Success", f"Secured file saved to:\n{output_path}")
            except Exception as e:
                self.hide_loader()
                messagebox.showerror("‚ùå Error", f"Secured failed:\n{str(e)}")

        threading.Thread(target=process).start()

    def show_loader(self, message):
        self.loader_win = tb.Toplevel(self.root)
        self.loader_win.title("Processing...")
        self.loader_win.geometry("300x100")
        self.loader_win.resizable(False, False)
        self.loader_win.grab_set()

        tb.Label(self.loader_win, text=message, font=("Times New Roman", 12)).pack(pady=10)
        self.spinner = tb.Floodgauge(self.loader_win, mode='indeterminate', bootstyle='info')
        self.spinner.pack(pady=10, fill='x', padx=20)
        self.spinner.start()

    def hide_loader(self):
        if hasattr(self, 'spinner') and self.spinner:
            self.spinner.stop()
        if hasattr(self, 'loader_win') and self.loader_win:
            self.loader_win.destroy()

if __name__ == "__main__":
    root = tb.Window(themename="journal")
    app = PiiRedactorApp(root)
    root.mainloop()
